# Criar conta no gitlab
# Criar projeto chamado bytebank
# Realizar clone com:

$ git remote add gitlab https://gitlab.com/jnlucas/meusistema.git
$ git remote add origin git@github.com:alura-cursos/devops.git

# Após criar projeto no gitlab, clonar o mesmo em repositório local
$ git clone 

# Baixar e descompactar para o diretório criado os arquivos do projeto em: https://github.com/alura-cursos/devops/archive/master.zip

# Adiciná-los ao projeto com:
$ git add --all
$ git push

# Configur o docker-compose.yaml

# Subir o container:
$ docker-compose up --build

Com esse comando vamos subir o container, e caso não tenhamos ainda a imagem aluracursos/django_todolist_image_build em nossa máquina, ela será baixada pelo docker.

Ao concluir o build, percebam que o terminal ficou preso a essa tarefa. Vamos então deixar que o mesmo rode em background, para isso digite no terminal:
$ ctrl c

# Em seguida vamos subir novamente o container:
$ docker-compose up -d

Passando o parâmetro -d para o comando, o container sobe mas não prende o terminal a esta tarefa.

Agora que o container está de pé, vamos rodar os migrations iniciais que o projeto precisa. Então, digite no terminal:

$ docker-compose run web python manage.py makemigrations
$ docker-compose run web python manage.py migrate

# E para criarmos um usuário para essa aplicação, ainda no terminal, digite:
$ docker-compose run web python manage.py createsuperuser

# É isso aí pessoal, agora temos o projeto funcionando em nosso container docker.

#################################################

# Configurar a estrutura do .gitlab-ci.yml

image: docker:stable

services:
- docker:dind

before_script:
- docker info

build-docker:
    stage: build
    script: 
    - docker build -t minha-imagem .

#################################################

# Criar conta no docker hub

# Criar variáveis de login no gitlab no menu settings > CICD > variables > add variable

# Salvar, comitar e push

#################################################

# Runner - executor de tarefas

# Após instalar o docker na máquina local, baixar a imagem do gitlab-runner
# No Power Shell

# Caso queira baixar a imagem
$ docker pull gitlab/gitlab-runner:latest

# Criar o diretório no Windows: c/Shared/gitlab-runner/

# Criar e subir o container com a imagem gitlab-runner
$ docker run -d --name gitlab-runner --restart always -v c/Shared/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest

# Exibir containers ativos:
$ docker ps

#################################################

# No gitlab ir em settings > CICD > Runners > copiar chave em "especific runners"

# No Power Shell

# Acessar o container local e abrir o bash
$ docker exec -it gitlab-runner /bin/bash

# Registrar 
$ gitlab-runner register

# Após esse comando, inserir as informações:

https://gitlab.com/
$ enter

# Colar o token que foi criado na página do gitlab
$ enter

# Inserir descrição do runner:
$ runner-bytebank

$ enter
# Ignorar a tag
$ enter

# Definir o executor, digitar "docker"
$ docker

# Definir imagem padrão para o runner
$ wesleyav/minha-imagem:latest

# Registrado com sucesso!

# Sair do temrinal do gitlab-runner
$ exit

# No gitlab atualizar a página do runners, será exibido o runner que foi criado
# Editar o runner e adicionar a tag "executor-tarefas" > salvar

#################################################

# Arquivo:

### inicio ###

image: docker:stable

stages:
- pre-build
- build
- test
- deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

build-docker:
  services:
  - docker:dind

  before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

  stage: pre-build
  script:  
  - docker build -t minha-imagem .
  - docker tag minha-imagem wesleyav/minha-imagem:latest
  - docker push wesleyav/minha-imagem:latest

build-project:
  image: wesleyav/minha-imagem:latest
  services:
  - docker:dind
  - mysql:5.7
  variables:
    MYSQL_USER: xxx
    MYSQL_PASSWORD: xxx
    MYSQL_DATABASE: xxx
    MYSQL_ROOT_PASSWORD: xxx

    DB_NAME: 'xxx'
    DB_USER: 'xxx'
    DB_PASSWORD: 'xxx'
    DB_PORT: 'xxx'
    DB_HOST: 'xxx'
    SECRET_KEY: 'xxx'

  stage: build
  tags:
  - executor-tarefas
  dependencies:
  - build-docker
  script:
  - python manage.py makemigrations
  - python manage.py migrate

### fim ###

#################################################

### fim ###

image: docker:stable

stages:
- pre-build
- build
- test
- deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

build-docker:
  services:
  - docker:dind

  before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

  stage: pre-build
  script:  
  - docker build -t minha-imagem .
  - docker tag minha-imagem wesleyav/minha-imagem:latest
  - docker push wesleyav/minha-imagem:latest

build-project:
  image: wesleyav/minha-imagem:latest
  services:
  - docker:dind
  - mysql:5.7
  variables:
    MYSQL_USER: $DB_USER
    MYSQL_PASSWORD: $DB_PASSWORD 
    MYSQL_DATABASE: $DB_DATABASE 
    MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD 

    DB_NAME: $DB_DATABASE
    DB_USER: $DB_USER
    DB_PASSWORD: $DB_PASSWORD
    DB_PORT: '3306'
    DB_HOST: 'mysql'
    SECRET_KEY: $DB_SECRET_KEY

  stage: build
  tags:
  - executor-tarefas
  dependencies:
  - build-docker
  script:
  - python manage.py makemigrations
  - python manage.py migrate

test-project:
  image: wesleyav/minha-imagem:latest
  stage: test
  services:
  - docker:dind
  - mysql:5.7
  variables:
    MYSQL_USER: $DB_USER
    MYSQL_PASSWORD: $DB_PASSWORD 
    MYSQL_DATABASE: $DB_DATABASE 
    MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD 

    DB_NAME: $DB_DATABASE
    DB_USER: $DB_USER
    DB_PASSWORD: $DB_PASSWORD
    DB_PORT: '3306'
    DB_HOST: 'mysql'
    SECRET_KEY: $DB_SECRET_KEY
  
  dependencies:
  - build-project
  tags:
  - executor-tarefas
  script:
  - python -m unittest setUp


### fim ###

#################################################

# Acessar o container local e abrir o bash
$ docker exec -it gitlab-runner /bin/bash

# Registrar 
$ gitlab-runner register

# Após esse comando, inserir as informações:

https://gitlab.com/
$ enter

# Colar o token que foi criado na página do gitlab
$ enter

# Inserir descrição do runner:
$ runner-deploy

$ enter
# Ignorar a tag
$ enter

# Definir o executor, digitar "docker"
$ shell

# Definir imagem padrão para o runner
$ wesleyav/minha-imagem:latest

# Registrado com sucesso!

# Sair do temrinal do gitlab-runner
$ exit

# No gitlab atualizar a página do runners, será exibido o runner que foi criado
# Editar o runner e adicionar a tag "executor-deploy" > salvar


#################################################

# No terminal do gitlab-runner

# Visualizar usuários do container
$ cat /etc/passwd

# Será usado o usuário gitlab-runner

# Logar no usuário gitlab-runner
$ su gitlab-runner

# Gerar chaves
$ ssh-keygen

$ enter
$ enter
$ enter

# Ir para o diretório padrão do usuário onde foi salvo a chave ssh
$ cd /home/gitlab-runner/.ssh

# Visualizar arquivos
$ls -a

# Copiar chave pública para o authorized keys da máquina destino
$ cat id_rsa.pub

# Sair do usuário
$ exit

# Voltar para a máquina local
$ exit

# Logar no usuário gitlab-runner
$ su gitlab-runner

# Acessar via ssh
$ ssh usuario@ip


#################################################